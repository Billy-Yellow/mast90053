# define the polynomial ring and variables
R.<x, y, z, t> = QQ[]

f1 = x - 2*y + z + t

f2 = x + y + 3*z + t

f3 = 2*x - y - z - t

f4 = 4*x - 8*y - z + t

# make a matrix out of the coefficients of these polynomials
A = matrix(QQ, [[1, -2, 1, 1], [1, 1, 3, 1], [2, -1, -1, -1], [4, -8, -1, 1]])

# get Sage to do Gauss--Jordan elimination
B = A.rref()

# make the polynomials out of the rows of B
g1 = x - 2/5*t

g2 = y - 2/5*t

g3 = z + 3/5*t

# get Sage to verify the claim of Exercise 4.1, namely that
# the ideal generated by the f's is the same as the ideal
# generated by the g's
I = R.ideal([f1, f2, f3, f4])

J = R.ideal([g1, g2, g3])

I == J

# output: True

# here's one way to define the function from the optional
# question in Exercise 4.2
# the delicate part is the transfer of the polynomial
# coefficients into a matrix and back

def reduce_gens(flst):
    R = parent(flst[0])
    Q = R.base_ring()
    vars = R.gens()
    n = len(vars)
    rowlst = [[f.coefficient(u) for u in vars] for f in flst]
    A = matrix(Q, rowlst)
    B = A.rref()
    glst = []
    for r in B.rows():
        g = sum([r[j]*vars[j] for j in range(n)])
        if g != 0:
            glst.append(g)
    return glst
